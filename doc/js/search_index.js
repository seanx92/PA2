var search_data = {"index":{"searchIndex":["moviedata","movietest","error()","load_data()","load_test()","mean()","most_similar()","movies()","new()","new()","popularity()","popularity_list()","predict()","rating()","rms()","run_test()","similarity()","stddev()","to_a()","viewers()"],"longSearchIndex":["moviedata","movietest","movietest#error()","moviedata#load_data()","moviedata#load_test()","movietest#mean()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","moviedata#viewers()"],"info":[["MovieData","","MovieData.html","","<p>MovieData class\n"],["MovieTest","","MovieTest.html","","<p>MovieTest class\n"],["error","MovieTest","MovieTest.html#method-i-error","()","<p>Returns an array of predication error.\n"],["load_data","MovieData","MovieData.html#method-i-load_data","(filename, max_line_num)","<p>Read in the max_line_num lines in “filename” as the training set.\n"],["load_test","MovieData","MovieData.html#method-i-load_test","(filename, max_line_num)","<p>Read in the max_line_num lines in “filename” as the test set.\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>Returns the average predication error.\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u)","<p>Returns a list of users whose tastes are most similar to the tastes of user\nu\n"],["movies","MovieData","MovieData.html#method-i-movies","(user_id)","<p>Returns the array of movies that user user_id has watched.\n"],["new","MovieData","MovieData.html#method-c-new","(*args)","<p>Constructor for class MovieData. Its arguments has two options:\n<p>z = MovieData.new(“ml-100k”) …\n"],["new","MovieTest","MovieTest.html#method-c-new","(result_list)","<p>Constructor for class MovieData. result_list is an array of tuples that\nhave a format as below:\n<p>user_id … &mdash; \n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>Returns a number that indicates the popularity of movie movie_id (higher\nnumbers are more popular).\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()",""],["predict","MovieData","MovieData.html#method-i-predict","(user_id, movie_id)","<p>Returns a floating point number between 1.0 and 5.0 as an estimate of what\nuser user_id would rate movie …\n"],["rating","MovieData","MovieData.html#method-i-rating","(user_id, movie_id)","<p>Returns the rating that user user_id gave movie movie_id in the training\nset, and 0 if user user_id did …\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>Returns the root mean square error of the prediction.\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(*args)","<p>Runs the predict method on the first k ratings in the test set and returns\na MovieTest object containing …\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>Returns a floating point number between 0 and 1.0 as the similarity in\nmovie preference between user1 …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>Returns the standard deviation of the error.\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>Returns an array of the predictions in the form [user_id, movie_id,\nreal_rating, predict_rating].\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(movie_id)","<p>Returns the array of users that have seen movie movie_id.\n"]]}}